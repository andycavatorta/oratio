import os
import sys
import settings
import traceback
import threading
import Queue
import crystal_helpers as crystal

BASE_PATH = os.path.dirname(os.path.realpath(__file__))
UPPER_PATH = os.path.split(os.path.dirname(os.path.realpath(__file__)))[0]
DEVICES_PATH = "%s/Hosts/" % (BASE_PATH )
THIRTYBIRDS_PATH = "%s/thirtybirds_2_0" % (UPPER_PATH )

sys.path.append(BASE_PATH)
sys.path.append(UPPER_PATH)

from thirtybirds_2_0.Network.manager import init as network_init

class Network(object):
    def __init__(self, hostname, network_message_handler, network_status_handler):
        self.hostname = hostname
        self.thirtybirds = network_init(
            hostname=hostname,
            role="client",
            discovery_multicastGroup=settings.discovery_multicastGroup,
            discovery_multicastPort=settings.discovery_multicastPort,
            discovery_responsePort=settings.discovery_responsePort,
            pubsub_pubPort=settings.pubsub_pubPort,
            message_callback=network_message_handler,
            status_callback=network_status_handler
        )


# Main handles network send/recv and can see all other classes directly
class Main(threading.Thread):
    def __init__(self, hostname):
        threading.Thread.__init__(self)
        self.network = Network(hostname, self.network_message_handler, self.network_status_handler)
        self.queue = Queue.Queue()

        # default intermediate frequency
        self.xtal_freq = 167465.0
        self.f_offset = 0           # adjust output freq

        # get voice messages
        self.network.thirtybirds.subscribe_to_topic("voice_1")

    def network_message_handler(self, topic_msg):
        # this method runs in the thread of the caller, not the tread of Main
        topic, msg =  topic_msg # separating just to eval msg.  best to do it early.  it should be done in TB.
        if len(msg) > 0: 
            msg = eval(msg)
        self.add_to_queue(topic, msg)

    def network_status_handler(self, topic_msg):
        # this method runs in the thread of the caller, not the tread of Main
        print "Main.network_status_handler", topic_msg

    def add_to_queue(self, topic, msg):
        self.queue.put((topic, msg))

    def run(self):
        while True:
<<<<<<< HEAD
            time.sleep(60)

        ###  ###
"""

class FPGA():
    def __init__(
        self, 
        spi_chipeselect, 
        spi_masterslave
    ):
        self.spi_chipeselect = spi_chipeselect
        self.spi_masterslave = spi_masterslave
        self.spi_connection = None # to do
        # create SPI connection
    def send(self, filter_a, filter_b):
        #self.spi_connection.send
        print "FPGA: ", filter_a, filter_b

class TONE():
    def __init__(
        self, 
        spi_chipeselect_for_dac, 
        spi_masterslave_for_dac
    ):
        self.spi_chipeselect_for_dac = spi_chipeselect_for_dac
        self.spi_masterslave_for_dac = spi_masterslave_for_dac
        self.spi_connection = None # to do

    def send(self, freq, vol):
        #self.spi_connection.send
        print "TONE: ", freq, vol

class GainRampThread(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        self.currentGains = [0x00, 0x00, 0x00]
        self.target = [0x00, 0x00, 0x00]
        self.rampTimePerIncrement = 0.001

    def setRampTime(self, r):
        self.rampTimePerIncrement = r;

    def setTargetGain(self, crystalIndex, gain):
        self.target = t & 0xFF

    def run(self):
        while True:
            for i in range(0, 3):
                if (self.targetGains[i] > self.currentGains[i]):
                    self.currentGains[i] = self.currentGains[i] + 1
                    c.set_levels(i, self.currentGains[i])
                elif (self.targetGains[i] < self.currentGains[i]):
                    self.currentGains[i] = self.currentGains[i] - 1
            time.sleep(self.rampTimePerIncrement)

gainRampThread = GainRampThread()

# class TONES():
#     def __init__(
#         self, 
#         spi_chipeselect_for_dac_1, 
#         spi_masterslave_for_dac_1,
#         spi_chipeselect_for_dac_2, 
#         spi_masterslave_for_dac_2,
#         spi_chipeselect_for_dac_3, 
#         spi_masterslave_for_dac_3,
#         spi_chipeselect_for_fpga, 
#         spi_masterslave_for_fpga
#     ):
#         self.tone_1 = TONE(spi_chipeselect_for_dac_1, spi_masterslave_for_dac_1)
#         self.tone_2 = TONE(spi_chipeselect_for_dac_2 , spi_masterslave_for_dac_2)
#         self.tone_3 = TONE(spi_chipeselect_for_dac_3, spi_masterslave_for_dac_3)
#         self.fpga = FPGA(spi_chipeselect_for_fpga,spi_masterslave_for_fpga)

#     def send(self, multi_msg):
#         self.tone_1.send(multi_msg[0],multi_msg[1])
#         self.tone_2.send(multi_msg[2],multi_msg[3])
#         self.tone_3.send(multi_msg[4],multi_msg[5])
#         self.fpga.send(multi_msg[6],multi_msg[7])

# tones = TONES(
#         , #spi_chipeselect_for_dac_1, 
#         0, #spi_masterslave_for_dac_1,
#         , #spi_chipeselect_for_dac_2, 
#         0, #spi_masterslave_for_dac_2,
#         , #spi_chipeselect_for_dac_3, 
#         0, #spi_masterslave_for_dac_3,
#         , #spi_chipeselect_for_fpga, 
#          #spi_masterslave_for_fpga
# )

def network_status_handler(msg):
    print "network_status_handler", msg

def network_message_handler(msg):
    global offset, gainRampThread
    print "network_message_handler", msg
    topic = msg[0]
    #host, sensor, data = yaml.safe_load(msg[1])
    if topic == "__heartbeat__":
        print "heartbeat received", msg
    
    if topic == "voice_1":
        # tones.send(eval(msg[1]))

        # quick hack -- will make this better later!
        payload = eval(msg[1])
        freq_1, gain, freq_2, vol_2, freq_3, vol_3, cutoff_raw, pband = payload

        if (gain > 0.2):
            c.send_freq(0, offset-int(freq_1))
            c.send_freq(1, offset-int(freq_2))
            c.send_freq(2, offset-int(freq_3))
            gainRampThread.setTargetGain(0, 0 if gain < 0.1 else int(240.0 * payload[1]))
            gainRampThread.setTargetGain(1, 0 if vol_2 < 0.1 else int(255.0 * vol_2))
            gainRampThread.setTargetGain(2, 0 if vol_3 < 0.1 else int(255.0 * vol_3))
        else:
            c.send_freq(0, 0)
            c.send_freq(1, 0)
            c.send_freq(2, 0)
            gainRampThread.setTargetGain(0, 0)
            gainRampThread.setTargetGain(1, 0)
            gainRampThread.setTargetGain(2, 0)
        """
        #offset = 119104.6
        #print offset-int(payload[0])
        #c.set_levels(0, 255 if payload[1] < 0.5 else int(180.0 * payload[1]))
        #level_1 = 0 if payload[1] < 0.1 else int(120.0 * payload[1])
        #level_2 = 0 if vol_2 < 0.1 else int(255.0 * vol_2 * level_1 * 2)
        #level_3 = 0 if vol_3 < 0.1 else int(255.0 * vol_3 * level_1 * 2)
        level_1 = 0 if payload[1] < 0.1 else int(240.0 * payload[1])
        level_2 = 0 if vol_2 < 0.1 else int(255.0 * vol_2 * level_1)
        level_3 = 0 if vol_3 < 0.1 else int(255.0 * vol_3 * level_1)
        print "levels:", level_1, level_2, level_3
        c.set_levels(0, level_1)
        c.set_levels(1, level_2)
        c.set_levels(2, level_3)
        if level_1 <0.1:
            c.send_freq(0, 0)
            c.send_freq(1, 0)
            c.send_freq(2, 0)
        else:
            c.send_freq(0, offset-int(freq_1))
            c.send_freq(1, offset-int(freq_2))
            c.send_freq(2, offset-int(freq_3))
        #get period corresponding to cutoff frequency * 100 (in microseconds)
        """
        cutoff_freq = (cutoff_raw - 0.5) * freq_1 + freq_1
        adj_period = 1e6 / (cutoff_freq * 100)
        c.pport_write(1, adj_period)
        c.pband_size(int(pband/255))

        """
        if (payload[1] > 0.2):
            c.send_freq(0, offset-int(freq_1))
            c.send_freq(1, offset-int(freq_2))
            c.send_freq(2, offset-int(freq_3))
            #c.set_levels(0, 255 if payload[1] < 0.5 else int(180.0 * payload[1]))
            c.set_levels(0, 0 if payload[1] < 0.1 else int(180.0 * payload[1]))
            c.set_levels(1, 0 if vol_2 < 0.1 else int(255.0 * vol_2))
            c.set_levels(2, 0 if vol_3 < 0.1 else int(255.0 * vol_3))
        else:
            c.send_freq(0, 0)
            c.send_freq(1, 0)
            c.send_freq(2, 0)
        """
network = None # makin' it global

def init(HOSTNAME):
    c.init()

    c.send_freq(0, 0)
    c.send_freq(1, 0)
    c.send_freq(2, 0)

    gainRampThread = GainRampThread()
    gainRampThread.daemon = True
    gainRampThread.start()

    gainRampThread.setTargetGain(0, 0)
    gainRampThread.setTargetGain(1, 0)
    gainRampThread.setTargetGain(2, 0)

    global network
    network = network_init(
        hostname=HOSTNAME,
        role="client",
        discovery_multicastGroup=settings.discovery_multicastGroup,
        discovery_multicastPort=settings.discovery_multicastPort,
        discovery_responsePort=settings.discovery_responsePort,
        pubsub_pubPort=settings.pubsub_pubPort,
        message_callback=network_message_handler,
        status_callback=network_status_handler
    )

    network.subscribe_to_topic("system")  # subscribe to all system messages
    network.subscribe_to_topic("voice_1")
    #main = Main(HOSTNAME)
    #main.start()
=======
            try:
                topic, msg = self.queue.get(True)
                if topic == "voice_1":

                    params = []

                    # mute if volume is below threshold
                    thresh = [0.01, 0.1, 0.1]
                    for i in xrange(6):
                        param = 0 if msg[1] < thresh[0] else msg[i]                   # master
                        param = 0 if msg[3] < thresh[1] and i in (2,3) else param     # subvoice 1
                        param = 0 if msg[5] < thresh[2] and i in (4,5) else param     # subvoice 2
                        params.append(param)

                    
                    freq_root, vol, freq_sub1, vol_sub1, freq_sub2, vol_sub2 = params

                    # update intermediate frequency if new data is available
                    self.xtal_freq = crystal.measure_xtal_freq() or self.xtal_freq

                    print params, self.xtal_freq

                    # subvoice 1 (fundamental) frequency and voice volume
                    crystal.set_freq(0, self.xtal_freq - (freq_root + self.f_offset))
                    crystal.set_volume(0, map_master_volume(vol))

                    # subvoice 2 frequency and volume
                    crystal.set_freq(1, self.xtal_freq - (freq_sub1 + self.f_offset))
                    crystal.set_volume(1, map_subvoice_volume(vol_sub1))

                    # subvoice 3 frequency and volume
                    crystal.set_freq(2, self.xtal_freq - (freq_sub2 + self.f_offset))
                    crystal.set_volume(2, map_subvoice_volume(vol_sub2))

                    
            except Exception as e:
                exc_type, exc_value, exc_traceback = sys.exc_info()
                print e, repr(traceback.format_exception(exc_type, exc_value,exc_traceback))


def init(hostname):
    crystal.init()

    main = Main(hostname)
    main.daemon = True
    main.start()
    return main

def map_subvoice_volume(level):
    return map_volume(level, 154, 100)

def map_master_volume(level,):
    return map_volume(level, 100, 100)
>>>>>>> fe4cf1b98e00e99b76aa795214dbcaa78e0aa47c

def map_volume(level, min, scale):
    return 0 if level == 0 else min + level * scale